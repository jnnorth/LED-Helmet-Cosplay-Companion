{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/keyboard-dd970efc.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"mappings":"+HAAA,ojBAAIA,EAAoB,qBACpBC,EAAqB,qBAErBC,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,EAIfC,EAAsB,WACtBH,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,GAEfE,EAAsB,SAAUC,GAChCC,EAAqBD,GAChBA,EAAIE,iBAGTN,EAAwBO,EAAmBH,EAAIE,gBAC/CF,EAAIE,eAAeE,SAAW,WAC1BC,EAAqBL,GACjBM,KAAqBC,EAAkBP,GACvCQ,EAAgBR,GAEXS,EAAiBT,IACtBU,EAAiBV,MASzBC,EAAuB,SAAUD,GACjCA,EAAIW,iBAAiB,mBAAmB,SAAUC,GAAM,OAAOJ,EAAgBR,EAAKY,MACpFZ,EAAIW,iBAAiB,mBAAmB,WAAc,OAAOD,EAAiBV,OAE9EQ,EAAkB,SAAUR,EAAKY,GACjCC,EAAsBb,EAAKY,GAC3Bf,GAAe,GAEfa,EAAmB,SAAUV,GAC7Bc,EAAuBd,GACvBH,GAAe,GAcfS,EAAkB,WAClB,IAAIS,GAA0BpB,EAAuBqB,OAASpB,EAAsBoB,QAAUpB,EAAsBqB,MACpH,OAASpB,GACLF,EAAuBuB,QAAUtB,EAAsBsB,OACvDH,EA7DiB,KAmErBR,EAAoB,SAAUP,GAC9B,OAAOH,IAAiBY,EAAiBT,IAQzCS,EAAmB,SAAUT,GAC7B,OAAOH,GAAgBD,EAAsBoB,SAAWhB,EAAImB,aAK5DN,EAAwB,SAAUb,EAAKoB,GACvC,IAAIC,EAAiBD,EAAWA,EAASC,eAAiBrB,EAAImB,YAAcvB,EAAsBoB,OAC9FJ,EAAK,IAAIU,YAAY7B,EAAmB,CACxC8B,OAAQ,CAAEF,eAAgBA,KAE9BrB,EAAIwB,cAAcZ,IAKlBE,EAAyB,SAAUd,GACnC,IAAIY,EAAK,IAAIU,YAAY5B,GACzBM,EAAIwB,cAAcZ,IAQlBP,EAAuB,SAAUL,GACjCL,EAAyB8B,OAAOC,OAAO,GAAI9B,GAC3CA,EAAwBO,EAAmBH,EAAIE,iBAM/CC,EAAqB,SAAUD,GAC/B,MAAO,CACHgB,MAAOS,KAAKC,MAAM1B,EAAegB,OACjCF,OAAQW,KAAKC,MAAM1B,EAAec,QAClCa,UAAW3B,EAAe2B,UAC1BC,WAAY5B,EAAe4B,WAC3BC,QAAS7B,EAAe6B,QACxBC,SAAU9B,EAAe8B,SACzBf,MAAOf,EAAee","file":"static/js/51.b9218206.chunk.js","sourcesContent":["var KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\r\nvar KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\r\nvar KEYBOARD_THRESHOLD = 150;\r\nvar previousVisualViewport = {};\r\nvar currentVisualViewport = {};\r\nvar keyboardOpen = false;\r\n/**\r\n * This is only used for tests\r\n */\r\nvar resetKeyboardAssist = function () {\r\n    previousVisualViewport = {};\r\n    currentVisualViewport = {};\r\n    keyboardOpen = false;\r\n};\r\nvar startKeyboardAssist = function (win) {\r\n    startNativeListeners(win);\r\n    if (!win.visualViewport) {\r\n        return;\r\n    }\r\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n    win.visualViewport.onresize = function () {\r\n        trackViewportChanges(win);\r\n        if (keyboardDidOpen() || keyboardDidResize(win)) {\r\n            setKeyboardOpen(win);\r\n        }\r\n        else if (keyboardDidClose(win)) {\r\n            setKeyboardClose(win);\r\n        }\r\n    };\r\n};\r\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\r\nvar startNativeListeners = function (win) {\r\n    win.addEventListener('keyboardDidShow', function (ev) { return setKeyboardOpen(win, ev); });\r\n    win.addEventListener('keyboardDidHide', function () { return setKeyboardClose(win); });\r\n};\r\nvar setKeyboardOpen = function (win, ev) {\r\n    fireKeyboardOpenEvent(win, ev);\r\n    keyboardOpen = true;\r\n};\r\nvar setKeyboardClose = function (win) {\r\n    fireKeyboardCloseEvent(win);\r\n    keyboardOpen = false;\r\n};\r\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\r\nvar keyboardDidOpen = function () {\r\n    var scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\r\n    return (!keyboardOpen &&\r\n        previousVisualViewport.width === currentVisualViewport.width &&\r\n        scaledHeightDifference > KEYBOARD_THRESHOLD);\r\n};\r\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\r\nvar keyboardDidResize = function (win) {\r\n    return keyboardOpen && !keyboardDidClose(win);\r\n};\r\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\r\nvar keyboardDidClose = function (win) {\r\n    return keyboardOpen && currentVisualViewport.height === win.innerHeight;\r\n};\r\n/**\r\n * Dispatch a keyboard open event\r\n */\r\nvar fireKeyboardOpenEvent = function (win, nativeEv) {\r\n    var keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\r\n    var ev = new CustomEvent(KEYBOARD_DID_OPEN, {\r\n        detail: { keyboardHeight: keyboardHeight }\r\n    });\r\n    win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Dispatch a keyboard close event\r\n */\r\nvar fireKeyboardCloseEvent = function (win) {\r\n    var ev = new CustomEvent(KEYBOARD_DID_CLOSE);\r\n    win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\r\nvar trackViewportChanges = function (win) {\r\n    previousVisualViewport = Object.assign({}, currentVisualViewport);\r\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n};\r\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\r\nvar copyVisualViewport = function (visualViewport) {\r\n    return {\r\n        width: Math.round(visualViewport.width),\r\n        height: Math.round(visualViewport.height),\r\n        offsetTop: visualViewport.offsetTop,\r\n        offsetLeft: visualViewport.offsetLeft,\r\n        pageTop: visualViewport.pageTop,\r\n        pageLeft: visualViewport.pageLeft,\r\n        scale: visualViewport.scale\r\n    };\r\n};\r\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\r\n"],"sourceRoot":""}