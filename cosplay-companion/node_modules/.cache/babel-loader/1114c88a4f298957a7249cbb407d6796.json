{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nick\\\\Desktop\\\\LED-Helmet-Cosplay-Companion\\\\cosplay-companion\\\\src\\\\components\\\\BluetoothButton.tsx\";\nimport React from 'react';\nimport { IonButton } from '@ionic/react';\nimport { BluetoothSerial } from '@ionic-native/bluetooth-serial';\nlet bluetoothComponent = {\n  macAddress: 'AA:BB:CC:DD:EE:FF',\n  // dummy MAC address, need to manually enter MAC address of Raspberry Pi\n  sendText: \"\",\n  clicked: false,\n  onClick: function () {\n    bluetoothComponent.clicked = true;\n    bluetoothComponent.sendText = \"This is some dummy text\";\n    let isClicked = \"true\";\n    window.localStorage.setItem(\"isClicked\", isClicked);\n    window.location.reload(true);\n    bluetoothComponent.init();\n  },\n  init: function () {\n    bluetoothComponent.sendText = 'hello world';\n    console.log(\"Initializing bluetooth connection...\");\n    bluetoothComponent.bindEvents();\n  },\n  bindEvents: function () {\n    document.addEventListener('findDevice', bluetoothComponent.connectBluetooth, false);\n  },\n  connectBluetooth: function () {\n    BluetoothSerial.connect(bluetoothComponent.macAddress);\n\n    if (BluetoothSerial.isEnabled()) {\n      bluetoothComponent.onConnect();\n    } else {\n      bluetoothComponent.onDisconnect();\n    }\n  },\n  onConnect: function () {\n    alert(\"Connected to device with MAC address: \" + bluetoothComponent.macAddress + \".\");\n    BluetoothSerial.subscribe('\\n');\n    let data = 'hello world';\n    bluetoothComponent.sendData(data);\n  },\n  onDisconnect: function () {\n    alert(\"Device has been disconnected\");\n  },\n  sendData: function (data) {\n    BluetoothSerial.write(data);\n    bluetoothComponent.sendText = data;\n  },\n  listDevices: function () {\n    BluetoothSerial.list();\n  },\n  connectFailed: function () {\n    alert(\"Connection to device failed!\");\n  },\n  onError: function (errorMsg) {\n    console.log('Error: ' + errorMsg + '\\n');\n  },\n  testRender: function () {\n    let isClicked = localStorage.getitem(\"isClicked\");\n\n    if (isClicked === \"true\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sentDataTest\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }\n      }, bluetoothComponent.sendText, \" \");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 16\n        }\n      }, \"No data sent yet\");\n    }\n  }\n};\n\nconst BluetoothButton = ({\n  title\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    color: \"primary\",\n    size: \"large\",\n    onClick: bluetoothComponent.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, \"Connect to Device\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, bluetoothComponent.testRender()));\n};\n\nexport default BluetoothButton;","map":{"version":3,"sources":["C:/Users/Nick/Desktop/LED-Helmet-Cosplay-Companion/cosplay-companion/src/components/BluetoothButton.tsx"],"names":["React","IonButton","BluetoothSerial","bluetoothComponent","macAddress","sendText","clicked","onClick","isClicked","window","localStorage","setItem","location","reload","init","console","log","bindEvents","document","addEventListener","connectBluetooth","connect","isEnabled","onConnect","onDisconnect","alert","subscribe","data","sendData","write","listDevices","list","connectFailed","onError","errorMsg","testRender","getitem","BluetoothButton","title"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { IonButton } from '@ionic/react';\r\nimport { BluetoothSerial } from '@ionic-native/bluetooth-serial';\r\nimport { bluetooth } from 'ionicons/icons';\r\n\r\n\r\nlet bluetoothComponent = {\r\n  macAddress: 'AA:BB:CC:DD:EE:FF', // dummy MAC address, need to manually enter MAC address of Raspberry Pi\r\n  sendText: \"\",\r\n  clicked: false,\r\n\r\n  onClick: function() {\r\n    bluetoothComponent.clicked = true\r\n    bluetoothComponent.sendText = \"This is some dummy text\"\r\n    let isClicked = \"true\"\r\n    window.localStorage.setItem(\"isClicked\", isClicked)\r\n    window.location.reload(true)\r\n    bluetoothComponent.init()\r\n  },\r\n\r\n  init: function() {\r\n    bluetoothComponent.sendText = 'hello world'\r\n    console.log(\"Initializing bluetooth connection...\")\r\n    bluetoothComponent.bindEvents()\r\n  },\r\n\r\n  bindEvents: function() {\r\n    document.addEventListener('findDevice', bluetoothComponent.connectBluetooth, false)\r\n  },\r\n\r\n  connectBluetooth: function() {\r\n    BluetoothSerial.connect(bluetoothComponent.macAddress)\r\n    if (BluetoothSerial.isEnabled()) {\r\n      bluetoothComponent.onConnect()\r\n    }\r\n    else {\r\n      bluetoothComponent.onDisconnect()\r\n    }\r\n  },\r\n\r\n  onConnect: function() {\r\n    alert(\"Connected to device with MAC address: \" + bluetoothComponent.macAddress + \".\")\r\n    BluetoothSerial.subscribe('\\n')\r\n    let data:string = 'hello world'\r\n    bluetoothComponent.sendData(data)\r\n  },\r\n\r\n  onDisconnect: function() {\r\n    alert(\"Device has been disconnected\")\r\n  },\r\n\r\n  sendData: function(data:string) {\r\n    BluetoothSerial.write(data)\r\n    bluetoothComponent.sendText = data\r\n  },\r\n\r\n  listDevices: function() {\r\n    BluetoothSerial.list()\r\n  },\r\n\r\n  connectFailed: function() {\r\n    alert(\"Connection to device failed!\")\r\n  },\r\n\r\n  onError: function(errorMsg:string) {\r\n    console.log('Error: ' + errorMsg + '\\n')\r\n  },\r\n\r\n  testRender: function() {\r\n\r\n    let isClicked = localStorage.getitem(\"isClicked\")\r\n\r\n    if (isClicked === \"true\")\r\n    {\r\n      return( <div className=\"sentDataTest\">\r\n      {\r\n        bluetoothComponent.sendText\r\n      } </div> )\r\n    }\r\n    else\r\n    {\r\n      return ( <div>No data sent yet</div> )\r\n    }\r\n    \r\n  }\r\n};\r\n\r\ninterface ContainerProps {\r\n    title: string;\r\n  }\r\n  \r\n  const BluetoothButton: React.FC<ContainerProps> = ({ title }) => {   \r\n    return (\r\n      <div className=\"container\">\r\n        <strong>{title}</strong>\r\n            <p>\r\n                <IonButton color=\"primary\" size=\"large\" onClick={bluetoothComponent.onClick}>Connect to Device</IonButton>\r\n            </p>    \r\n            <div>\r\n              {\r\n                bluetoothComponent.testRender()\r\n              }\r\n            </div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default BluetoothButton;"]},"metadata":{},"sourceType":"module"}