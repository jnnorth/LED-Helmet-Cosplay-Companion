{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nick\\\\Desktop\\\\LED-Helmet-Cosplay-Companion\\\\cosplay-companion\\\\src\\\\components\\\\BluetoothButton.tsx\";\nimport React from 'react';\nimport { IonButton } from '@ionic/react';\nimport { BluetoothSerial } from '@ionic-native/bluetooth-serial';\nimport { Plugins } from '@capacitor/core';\nconst {\n  Toast\n} = Plugins;\nexport let bluetoothComponent = {\n  macAddress: 'DC:A6:32:84:37:41',\n  sendText: \"Test\",\n  bluetooth_started: false,\n  current_temp: \"\",\n  current_humd: \"\",\n  pi_connect: function () {\n    BluetoothSerial.disconnect().then(() => {\n      bluetoothComponent.testPiConnect();\n    }, () => {\n      bluetoothComponent.testPiConnect();\n    });\n  },\n  testPiConnect: function () {\n    BluetoothSerial.disconnect();\n    BluetoothSerial.isEnabled().then(() => {\n      BluetoothSerial.list().then(devices => {\n        let correct_mac_address = \"\";\n        correct_mac_address = bluetoothComponent.get_correct_mac(devices);\n\n        if (correct_mac_address != \"None\") {\n          //alert(\"Attempting to connect with \" + correct_mac_address + \"...\")\n          BluetoothSerial.connect(correct_mac_address).subscribe(() => {\n            // Successfully connected for write\n            BluetoothSerial.subscribe('\\n').subscribe(success => {\n              // Subscribe success\n              // Now connected for read and write\n              // When a string is received, it is sent to the handle_read function\n              bluetoothComponent.handle_read(success);\n            }, error => {\n              alert(\"Error: \" + error);\n            });\n            bluetoothComponent.bluetooth_started = true;\n            let myTest = \"This is a test string!\";\n            BluetoothSerial.write(myTest).then(() => {\n              // Write Success\n              alert(\"Test string: \" + myTest + \" has been sent to Raspberry Pi.\");\n            }, () => {\n              // Write Fail\n              alert(\"Failed to send test message!\");\n            });\n          }, () => {\n            // Connection failed or ended\n            bluetoothComponent.bluetooth_started = false;\n            alert(\"Connection failed.\");\n            BluetoothSerial.disconnect();\n          });\n        } else {\n          // No helmet paired\n          bluetoothComponent.bluetooth_started = false;\n          alert(\"Please pair with a helmet first.\");\n        }\n      }, () => {\n        // Failure on BluetoothSerial.list()\n        alert(\"Failed to list paired devices.\");\n      });\n    }, () => {\n      // Bluetooth not enabled\n      bluetoothComponent.bluetooth_started = false;\n      BluetoothSerial.disconnect();\n      alert(\"Please enable bluetooth.\");\n    });\n  },\n  // Debugging purposes only\n  alertDevices: function (devices) {\n    devices.forEach(device => {\n      alert(\"Name: \" + device.name + \"\\nAddress: \" + device.address + \"\\nClass: \" + device.class + \"\\nId: \" + device.id);\n    });\n  },\n  // This method sends the string to the Raspberry Pi\n  send_to_pi: function (data) {\n    BluetoothSerial.write(data).then(() => {\n      alert(\"Sent \" + data + \" to pi\");\n    }, () => {\n      bluetoothComponent.bluetooth_started = false;\n      alert(\"Failed to send data\");\n    });\n  },\n  // disconnects bluetooth\n  disconnectBluetooth: function () {\n    bluetoothComponent.bluetooth_started = false;\n    BluetoothSerial.disconnect();\n  },\n  // Scans all paired bluetooth devices and returns the MAC address of the device with the name \"Team-21-Helmet\"\n  get_correct_mac: function (devices) {\n    let ret = \"None\";\n    devices.forEach(device => {\n      if (device.name == \"Team-21-Helmet\") {\n        ret = device.address;\n      }\n    });\n    return ret;\n  },\n  setMAC: function (MAC) {\n    bluetoothComponent.macAddress = MAC;\n    console.log(\"Given MAC Address: \" + bluetoothComponent.macAddress);\n  },\n  //TODO: properly handle heat and humidity data\n  handle_read: function (heat_humidity) {\n    // The heat_humidity string is formatted in the following way:\n    // %t<temp:float>%h<humidity:float>\n    // For example, if the temp were 23.2 degrees C and the humidity were 36.1%, the string would read\n    // %t23.2%h36.1\n    let values = heat_humidity.split(\"%h\");\n    let myTemp = values[0].split(\"%t\");\n    let myHumd = values[1];\n    let realTemp = myTemp[1];\n    console.log(realTemp + \" \" + myHumd);\n    current_temp = realTemp;\n    current_humd = myHumd;\n    alert(heat_humidity);\n  },\n  readTest: function () {\n    bluetoothComponent.handle_read(\"%t234.2%h36.1\");\n  },\n  onClick: function () {\n    let isClicked = \"true\";\n    bluetoothComponent.sendText = 'hello world';\n    window.localStorage.setItem(\"sendText\", bluetoothComponent.sendText);\n    window.localStorage.setItem(\"isClicked\", isClicked); //window.location.reload()\n\n    bluetoothComponent.init();\n  },\n  init: function () {\n    console.log(\"Initializing bluetooth connection...\");\n    alert(BluetoothSerial.discoverUnpaired());\n    bluetoothComponent.bindEvents();\n  },\n  bindEvents: function () {\n    document.addEventListener('findDevice', bluetoothComponent.connectBluetooth, false);\n    bluetoothComponent.connectBluetooth();\n  },\n  connectBluetooth: function () {\n    BluetoothSerial.connect(bluetoothComponent.macAddress);\n\n    if (BluetoothSerial.isEnabled()) {\n      bluetoothComponent.onConnect();\n    } else {\n      bluetoothComponent.connectFailed();\n    }\n  },\n  onConnect: function () {\n    BluetoothSerial.subscribe('\\n');\n    let data = 'This is a test string';\n    alert(\"Connected to device with MAC address: \" + bluetoothComponent.macAddress);\n    bluetoothComponent.sendData(data);\n  },\n  onDisconnect: function () {\n    alert(\"Device has been disconnected\");\n  },\n  sendData: function (data) {\n    BluetoothSerial.write(data);\n    bluetoothComponent.sendText = data;\n  },\n  listDevices: function () {\n    BluetoothSerial.list();\n  },\n  connectFailed: function () {\n    alert(\"Connection to device failed!\");\n  },\n  onError: function (errorMsg) {\n    console.log('Error: ' + errorMsg + '\\n');\n  },\n  testRender: function () {\n    let isClicked = window.localStorage.getItem(\"isClicked\");\n    let testText = window.localStorage.getItem(\"sendText\");\n    console.log(\"isClicked: \" + isClicked);\n    console.log(\"bluetoothComponent.sendText: \" + bluetoothComponent.sendText);\n\n    if (isClicked === \"true\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sentDataTest\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }\n      }, \" Test: \", testText);\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 16\n        }\n      }, \"Test: No text available yet\");\n    }\n  }\n};\n\nconst BluetoothButton = ({\n  title\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    id: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }, title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    color: \"primary\",\n    size: \"large\",\n    onClick: bluetoothComponent.pi_connect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }\n  }, \"Connect to Device\")));\n};\n\nexport default BluetoothButton;","map":{"version":3,"sources":["C:/Users/Nick/Desktop/LED-Helmet-Cosplay-Companion/cosplay-companion/src/components/BluetoothButton.tsx"],"names":["React","IonButton","BluetoothSerial","Plugins","Toast","bluetoothComponent","macAddress","sendText","bluetooth_started","current_temp","current_humd","pi_connect","disconnect","then","testPiConnect","isEnabled","list","devices","correct_mac_address","get_correct_mac","connect","subscribe","success","handle_read","error","alert","myTest","write","alertDevices","forEach","device","name","address","class","id","send_to_pi","data","disconnectBluetooth","ret","setMAC","MAC","console","log","heat_humidity","values","split","myTemp","myHumd","realTemp","readTest","onClick","isClicked","window","localStorage","setItem","init","discoverUnpaired","bindEvents","document","addEventListener","connectBluetooth","onConnect","connectFailed","sendData","onDisconnect","listDevices","onError","errorMsg","testRender","getItem","testText","BluetoothButton","title"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { IonButton } from '@ionic/react';\r\nimport { BluetoothSerial } from '@ionic-native/bluetooth-serial';\r\nimport { Plugins } from '@capacitor/core'\r\nconst { Toast } = Plugins\r\n\r\nexport let bluetoothComponent = {\r\n  macAddress: 'DC:A6:32:84:37:41',\r\n    sendText: \"Test\",\r\n    bluetooth_started: false,\r\n    current_temp: \"\",\r\n    current_humd: \"\",\r\n\r\n    pi_connect: function () {\r\n        BluetoothSerial.disconnect().then(() => {\r\n            bluetoothComponent.testPiConnect()\r\n        }, () => {\r\n            bluetoothComponent.testPiConnect()\r\n        })\r\n    },\r\n\r\n    testPiConnect: function () {\r\n        BluetoothSerial.disconnect()\r\n        BluetoothSerial.isEnabled().then(() => {\r\n            BluetoothSerial.list().then(devices => {\r\n                let correct_mac_address : string = \"\"\r\n                correct_mac_address = bluetoothComponent.get_correct_mac(devices)\r\n                if (correct_mac_address != \"None\") {\r\n                    //alert(\"Attempting to connect with \" + correct_mac_address + \"...\")\r\n                    BluetoothSerial.connect(correct_mac_address).subscribe(() => {\r\n                        // Successfully connected for write\r\n                        BluetoothSerial.subscribe('\\n').subscribe(success => {\r\n                            // Subscribe success\r\n                            // Now connected for read and write\r\n                            // When a string is received, it is sent to the handle_read function\r\n                            bluetoothComponent.handle_read(success)\r\n                        }, error => {\r\n                            alert(\"Error: \" + error)\r\n                        })\r\n                        bluetoothComponent.bluetooth_started = true\r\n                        let myTest: string = \"This is a test string!\"\r\n                        BluetoothSerial.write(myTest).then(() => {\r\n                            // Write Success\r\n                            alert(\"Test string: \" + myTest + \" has been sent to Raspberry Pi.\")\r\n                        }, () => {\r\n                            // Write Fail\r\n                            alert(\"Failed to send test message!\")\r\n                        })\r\n                    }, () => {\r\n                        // Connection failed or ended\r\n                        bluetoothComponent.bluetooth_started = false\r\n                        alert(\"Connection failed.\")\r\n                        BluetoothSerial.disconnect()\r\n                    })\r\n                }\r\n                else {\r\n                    // No helmet paired\r\n                    bluetoothComponent.bluetooth_started = false\r\n                    alert(\"Please pair with a helmet first.\")\r\n                }\r\n            }, () => {\r\n                // Failure on BluetoothSerial.list()\r\n                alert(\"Failed to list paired devices.\")\r\n            })\r\n        }, () => {\r\n                // Bluetooth not enabled\r\n                bluetoothComponent.bluetooth_started = false\r\n                BluetoothSerial.disconnect()\r\n                alert(\"Please enable bluetooth.\")\r\n        })\r\n    },\r\n\r\n    // Debugging purposes only\r\n    alertDevices: function (devices: pairedlist[]) {\r\n        devices.forEach(device => {\r\n            alert(\"Name: \" + device.name + \"\\nAddress: \" + device.address + \"\\nClass: \" + device.class + \"\\nId: \" + device.id)\r\n        })\r\n    },\r\n\r\n    // This method sends the string to the Raspberry Pi\r\n    send_to_pi: function (data: string) {\r\n        BluetoothSerial.write(data).then(() => {\r\n            alert(\"Sent \" + data + \" to pi\")\r\n        }, () => {\r\n            bluetoothComponent.bluetooth_started = false\r\n            alert(\"Failed to send data\")\r\n        })\r\n    },\r\n\r\n    // disconnects bluetooth\r\n    disconnectBluetooth: function () {\r\n        bluetoothComponent.bluetooth_started = false\r\n        BluetoothSerial.disconnect()\r\n    },\r\n\r\n    // Scans all paired bluetooth devices and returns the MAC address of the device with the name \"Team-21-Helmet\"\r\n    get_correct_mac: function (devices: pairedlist[]) {\r\n        let ret: string = \"None\"\r\n        devices.forEach(device => {\r\n            if (device.name == \"Team-21-Helmet\") {\r\n                ret = device.address\r\n            }\r\n        })\r\n        return ret\r\n    },\r\n\r\n  setMAC: function(MAC:string) {\r\n    bluetoothComponent.macAddress = MAC;\r\n    console.log(\"Given MAC Address: \" + bluetoothComponent.macAddress)\r\n    },\r\n\r\n    //TODO: properly handle heat and humidity data\r\n    handle_read: function (heat_humidity: string) {\r\n        // The heat_humidity string is formatted in the following way:\r\n        // %t<temp:float>%h<humidity:float>\r\n        // For example, if the temp were 23.2 degrees C and the humidity were 36.1%, the string would read\r\n        // %t23.2%h36.1\r\n\r\n        let values = heat_humidity.split(\"%h\")\r\n        let myTemp = values[0].split(\"%t\")\r\n        let myHumd = values[1]\r\n        let realTemp = myTemp[1]\r\n        console.log(realTemp + \" \" + myHumd)\r\n        current_temp = realTemp\r\n        current_humd = myHumd\r\n        alert(heat_humidity)\r\n    },\r\n\r\n  readTest: function() {\r\n    bluetoothComponent.handle_read(\"%t234.2%h36.1\")\r\n  },\r\n\r\n  onClick: function() {\r\n    let isClicked = \"true\"\r\n    bluetoothComponent.sendText = 'hello world'\r\n    window.localStorage.setItem(\"sendText\", bluetoothComponent.sendText)\r\n    window.localStorage.setItem(\"isClicked\", isClicked)\r\n    //window.location.reload()\r\n    bluetoothComponent.init()\r\n  },\r\n\r\n  init: function() {\r\n    console.log(\"Initializing bluetooth connection...\")\r\n    alert(BluetoothSerial.discoverUnpaired())\r\n    bluetoothComponent.bindEvents()\r\n  },\r\n\r\n  bindEvents: function() {\r\n    document.addEventListener('findDevice', bluetoothComponent.connectBluetooth, false)\r\n    bluetoothComponent.connectBluetooth()\r\n  },\r\n\r\n  connectBluetooth: function() {\r\n    BluetoothSerial.connect(bluetoothComponent.macAddress)\r\n    if (BluetoothSerial.isEnabled()) {\r\n      bluetoothComponent.onConnect()\r\n    }\r\n    else\r\n    {\r\n      bluetoothComponent.connectFailed()\r\n    }\r\n  },\r\n\r\n  onConnect: function() {\r\n    BluetoothSerial.subscribe('\\n')\r\n    let data:string = 'This is a test string'\r\n    alert(\"Connected to device with MAC address: \" + bluetoothComponent.macAddress)\r\n    bluetoothComponent.sendData(data)\r\n  },\r\n\r\n  onDisconnect: function() {\r\n    alert(\"Device has been disconnected\")\r\n  },\r\n\r\n  sendData: function(data:string) {\r\n    BluetoothSerial.write(data)\r\n    bluetoothComponent.sendText = data\r\n  },\r\n\r\n  listDevices: function() {\r\n    BluetoothSerial.list()\r\n  },\r\n\r\n  connectFailed: function() {\r\n    alert(\"Connection to device failed!\")\r\n  },\r\n\r\n  onError: function(errorMsg:string) {\r\n    console.log('Error: ' + errorMsg + '\\n')\r\n  },\r\n\r\n  testRender: function() {\r\n\r\n    let isClicked = window.localStorage.getItem(\"isClicked\")\r\n    let testText = window.localStorage.getItem(\"sendText\")\r\n\r\n    console.log(\"isClicked: \" + isClicked)\r\n    console.log(\"bluetoothComponent.sendText: \" + bluetoothComponent.sendText)\r\n\r\n    if (isClicked === \"true\")\r\n    {\r\n      return( <div className=\"sentDataTest\"> Test: {testText}\r\n      </div> )\r\n    }\r\n    else\r\n    {\r\n      return ( <div>Test: No text available yet</div> )\r\n    }\r\n    \r\n  }\r\n};\r\n\r\ninterface pairedlist {\r\n    \"class\": number,\r\n    \"id\": string,\r\n    \"address\": string,\r\n    \"name\": string\r\n}\r\n\r\ninterface ContainerProps {\r\n    title: string;\r\n  }\r\n  \r\n  const BluetoothButton: React.FC<ContainerProps> = ({ title }) => {   \r\n    return (\r\n      <div className=\"container\" id=\"container\">\r\n        <strong>{title}</strong>\r\n            <p>\r\n                <IonButton color=\"primary\" size=\"large\" onClick={bluetoothComponent.pi_connect}>Connect to Device</IonButton>\r\n            </p>\r\n      </div>\r\n    );\r\n\r\n  };\r\n  \r\n  export default BluetoothButton;\r\n"]},"metadata":{},"sourceType":"module"}