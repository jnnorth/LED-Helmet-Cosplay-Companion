{"ast":null,"code":"var KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nvar KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nvar KEYBOARD_THRESHOLD = 150;\nvar previousVisualViewport = {};\nvar currentVisualViewport = {};\nvar keyboardOpen = false;\n/**\r\n * This is only used for tests\r\n */\n\nvar resetKeyboardAssist = function resetKeyboardAssist() {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\n\nvar startKeyboardAssist = function startKeyboardAssist(win) {\n  startNativeListeners(win);\n\n  if (!win.visualViewport) {\n    return;\n  }\n\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n\n  win.visualViewport.onresize = function () {\n    trackViewportChanges(win);\n\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\n      setKeyboardOpen(win);\n    } else if (keyboardDidClose(win)) {\n      setKeyboardClose(win);\n    }\n  };\n};\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\n\n\nvar startNativeListeners = function startNativeListeners(win) {\n  win.addEventListener('keyboardDidShow', function (ev) {\n    return setKeyboardOpen(win, ev);\n  });\n  win.addEventListener('keyboardDidHide', function () {\n    return setKeyboardClose(win);\n  });\n};\n\nvar setKeyboardOpen = function setKeyboardOpen(win, ev) {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\n\nvar setKeyboardClose = function setKeyboardClose(win) {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\n\n\nvar keyboardDidOpen = function keyboardDidOpen() {\n  var scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return !keyboardOpen && previousVisualViewport.width === currentVisualViewport.width && scaledHeightDifference > KEYBOARD_THRESHOLD;\n};\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\n\n\nvar keyboardDidResize = function keyboardDidResize(win) {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\n\n\nvar keyboardDidClose = function keyboardDidClose(win) {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\r\n * Dispatch a keyboard open event\r\n */\n\n\nvar fireKeyboardOpenEvent = function fireKeyboardOpenEvent(win, nativeEv) {\n  var keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  var ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: {\n      keyboardHeight: keyboardHeight\n    }\n  });\n  win.dispatchEvent(ev);\n};\n/**\r\n * Dispatch a keyboard close event\r\n */\n\n\nvar fireKeyboardCloseEvent = function fireKeyboardCloseEvent(win) {\n  var ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\n\n\nvar trackViewportChanges = function trackViewportChanges(win) {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\n\n\nvar copyVisualViewport = function copyVisualViewport(visualViewport) {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale\n  };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };","map":{"version":3,"sources":["C:/Users/Nick/Desktop/LED-Helmet-Cosplay-Companion/cosplay-companion/node_modules/@ionic/core/dist/esm-es5/keyboard-dd970efc.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","KEYBOARD_THRESHOLD","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"mappings":"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","sourcesContent":["var KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\r\nvar KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\r\nvar KEYBOARD_THRESHOLD = 150;\r\nvar previousVisualViewport = {};\r\nvar currentVisualViewport = {};\r\nvar keyboardOpen = false;\r\n/**\r\n * This is only used for tests\r\n */\r\nvar resetKeyboardAssist = function () {\r\n    previousVisualViewport = {};\r\n    currentVisualViewport = {};\r\n    keyboardOpen = false;\r\n};\r\nvar startKeyboardAssist = function (win) {\r\n    startNativeListeners(win);\r\n    if (!win.visualViewport) {\r\n        return;\r\n    }\r\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n    win.visualViewport.onresize = function () {\r\n        trackViewportChanges(win);\r\n        if (keyboardDidOpen() || keyboardDidResize(win)) {\r\n            setKeyboardOpen(win);\r\n        }\r\n        else if (keyboardDidClose(win)) {\r\n            setKeyboardClose(win);\r\n        }\r\n    };\r\n};\r\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\r\nvar startNativeListeners = function (win) {\r\n    win.addEventListener('keyboardDidShow', function (ev) { return setKeyboardOpen(win, ev); });\r\n    win.addEventListener('keyboardDidHide', function () { return setKeyboardClose(win); });\r\n};\r\nvar setKeyboardOpen = function (win, ev) {\r\n    fireKeyboardOpenEvent(win, ev);\r\n    keyboardOpen = true;\r\n};\r\nvar setKeyboardClose = function (win) {\r\n    fireKeyboardCloseEvent(win);\r\n    keyboardOpen = false;\r\n};\r\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\r\nvar keyboardDidOpen = function () {\r\n    var scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\r\n    return (!keyboardOpen &&\r\n        previousVisualViewport.width === currentVisualViewport.width &&\r\n        scaledHeightDifference > KEYBOARD_THRESHOLD);\r\n};\r\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\r\nvar keyboardDidResize = function (win) {\r\n    return keyboardOpen && !keyboardDidClose(win);\r\n};\r\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\r\nvar keyboardDidClose = function (win) {\r\n    return keyboardOpen && currentVisualViewport.height === win.innerHeight;\r\n};\r\n/**\r\n * Dispatch a keyboard open event\r\n */\r\nvar fireKeyboardOpenEvent = function (win, nativeEv) {\r\n    var keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\r\n    var ev = new CustomEvent(KEYBOARD_DID_OPEN, {\r\n        detail: { keyboardHeight: keyboardHeight }\r\n    });\r\n    win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Dispatch a keyboard close event\r\n */\r\nvar fireKeyboardCloseEvent = function (win) {\r\n    var ev = new CustomEvent(KEYBOARD_DID_CLOSE);\r\n    win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\r\nvar trackViewportChanges = function (win) {\r\n    previousVisualViewport = Object.assign({}, currentVisualViewport);\r\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n};\r\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\r\nvar copyVisualViewport = function (visualViewport) {\r\n    return {\r\n        width: Math.round(visualViewport.width),\r\n        height: Math.round(visualViewport.height),\r\n        offsetTop: visualViewport.offsetTop,\r\n        offsetLeft: visualViewport.offsetLeft,\r\n        pageTop: visualViewport.pageTop,\r\n        pageLeft: visualViewport.pageLeft,\r\n        scale: visualViewport.scale\r\n    };\r\n};\r\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\r\n"]},"metadata":{},"sourceType":"module"}