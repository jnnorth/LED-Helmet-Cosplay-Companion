{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, cordovaPropertyGet, cordovaPropertySet, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport var BluetoothScanMode;\n\n(function (BluetoothScanMode) {\n  BluetoothScanMode[BluetoothScanMode[\"SCAN_MODE_OPPORTUNISTIC\"] = -1] = \"SCAN_MODE_OPPORTUNISTIC\";\n  BluetoothScanMode[BluetoothScanMode[\"SCAN_MODE_LOW_POWER\"] = 0] = \"SCAN_MODE_LOW_POWER\";\n  BluetoothScanMode[BluetoothScanMode[\"SCAN_MODE_BALANCED\"] = 1] = \"SCAN_MODE_BALANCED\";\n  BluetoothScanMode[BluetoothScanMode[\"SCAN_MODE_LOW_LATENCY\"] = 2] = \"SCAN_MODE_LOW_LATENCY\";\n})(BluetoothScanMode || (BluetoothScanMode = {}));\n\nexport var BluetoothMatchMode;\n\n(function (BluetoothMatchMode) {\n  BluetoothMatchMode[BluetoothMatchMode[\"MATCH_MODE_AGRESSIVE\"] = 1] = \"MATCH_MODE_AGRESSIVE\";\n  BluetoothMatchMode[BluetoothMatchMode[\"MATCH_MODE_STICKY\"] = 2] = \"MATCH_MODE_STICKY\";\n})(BluetoothMatchMode || (BluetoothMatchMode = {}));\n\nexport var BluetoothMatchNum;\n\n(function (BluetoothMatchNum) {\n  BluetoothMatchNum[BluetoothMatchNum[\"MATCH_NUM_ONE_ADVERTISEMENT\"] = 1] = \"MATCH_NUM_ONE_ADVERTISEMENT\";\n  BluetoothMatchNum[BluetoothMatchNum[\"MATCH_NUM_FEW_ADVERTISEMENT\"] = 2] = \"MATCH_NUM_FEW_ADVERTISEMENT\";\n  BluetoothMatchNum[BluetoothMatchNum[\"MATCH_NUM_MAX_ADVERTISEMENT\"] = 3] = \"MATCH_NUM_MAX_ADVERTISEMENT\";\n})(BluetoothMatchNum || (BluetoothMatchNum = {}));\n\nexport var BluetoothCallbackType;\n\n(function (BluetoothCallbackType) {\n  BluetoothCallbackType[BluetoothCallbackType[\"CALLBACK_TYPE_ALL_MATCHES\"] = 1] = \"CALLBACK_TYPE_ALL_MATCHES\";\n  BluetoothCallbackType[BluetoothCallbackType[\"CALLBACK_TYPE_FIRST_MATCH\"] = 2] = \"CALLBACK_TYPE_FIRST_MATCH\";\n  BluetoothCallbackType[BluetoothCallbackType[\"CALLBACK_TYPE_MATCH_LOST\"] = 4] = \"CALLBACK_TYPE_MATCH_LOST\";\n})(BluetoothCallbackType || (BluetoothCallbackType = {}));\n\nvar BluetoothLEOriginal =\n/** @class */\nfunction (_super) {\n  __extends(BluetoothLEOriginal, _super);\n\n  function BluetoothLEOriginal() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  BluetoothLEOriginal.prototype.initialize = function (params) {\n    return cordova(this, \"initialize\", {\n      \"successIndex\": 0,\n      \"errorIndex\": 2,\n      \"observable\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.enable = function () {\n    return cordova(this, \"enable\", {\n      \"callbackOrder\": \"reverse\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.disable = function () {\n    return cordova(this, \"disable\", {\n      \"callbackOrder\": \"reverse\",\n      \"sync\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.getAdapterInfo = function () {\n    return cordova(this, \"getAdapterInfo\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.startScan = function (params) {\n    return cordova(this, \"startScan\", {\n      \"callbackOrder\": \"reverse\",\n      \"observable\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.stopScan = function () {\n    return cordova(this, \"stopScan\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.retrieveConnected = function (params) {\n    return cordova(this, \"retrieveConnected\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.bond = function (params) {\n    return cordova(this, \"bond\", {\n      \"callbackOrder\": \"reverse\",\n      \"observable\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.unbond = function (params) {\n    return cordova(this, \"unbond\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.connect = function (params) {\n    return cordova(this, \"connect\", {\n      \"callbackOrder\": \"reverse\",\n      \"observable\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.reconnect = function (params) {\n    return cordova(this, \"reconnect\", {\n      \"callbackOrder\": \"reverse\",\n      \"observable\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.disconnect = function (params) {\n    return cordova(this, \"disconnect\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.close = function (params) {\n    return cordova(this, \"close\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.discover = function (params) {\n    return cordova(this, \"discover\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.services = function (params) {\n    return cordova(this, \"services\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.characteristics = function (params) {\n    return cordova(this, \"characteristics\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.descriptors = function (params) {\n    return cordova(this, \"descriptors\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.read = function (params) {\n    return cordova(this, \"read\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.subscribe = function (params) {\n    return cordova(this, \"subscribe\", {\n      \"callbackOrder\": \"reverse\",\n      \"observable\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.unsubscribe = function (params) {\n    return cordova(this, \"unsubscribe\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.write = function (params) {\n    return cordova(this, \"write\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.writeQ = function (params) {\n    return cordova(this, \"writeQ\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.readDescriptor = function (params) {\n    return cordova(this, \"readDescriptor\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.writeDescriptor = function (params) {\n    return cordova(this, \"writeDescriptor\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.rssi = function (params) {\n    return cordova(this, \"rssi\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.mtu = function (params) {\n    return cordova(this, \"mtu\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.requestConnectionPriority = function (params) {\n    return cordova(this, \"requestConnectionPriority\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.isInitialized = function () {\n    return cordova(this, \"isInitialized\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.isEnabled = function () {\n    return cordova(this, \"isEnabled\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.isScanning = function () {\n    return cordova(this, \"isScanning\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.isBonded = function (params) {\n    return cordova(this, \"isBonded\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.wasConnected = function (params) {\n    return cordova(this, \"wasConnected\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.isConnected = function (params) {\n    return cordova(this, \"isConnected\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.isDiscovered = function (params) {\n    return cordova(this, \"isDiscovered\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.hasPermission = function () {\n    return cordova(this, \"hasPermission\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.requestPermission = function () {\n    return cordova(this, \"requestPermission\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.isLocationEnabled = function () {\n    return cordova(this, \"isLocationEnabled\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.requestLocation = function () {\n    return cordova(this, \"requestLocation\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.initializePeripheral = function (params) {\n    return cordova(this, \"initializePeripheral\", {\n      \"callbackOrder\": \"reverse\",\n      \"observable\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.addService = function (params) {\n    return cordova(this, \"addService\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.removeService = function (params) {\n    return cordova(this, \"removeService\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.removeAllServices = function () {\n    return cordova(this, \"removeAllServices\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.startAdvertising = function (params) {\n    return cordova(this, \"startAdvertising\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.stopAdvertising = function () {\n    return cordova(this, \"stopAdvertising\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.isAdvertising = function () {\n    return cordova(this, \"isAdvertising\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.respond = function (params) {\n    return cordova(this, \"respond\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.notify = function (params) {\n    return cordova(this, \"notify\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.encodedStringToBytes = function (value) {\n    return cordova(this, \"encodedStringToBytes\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.bytesToEncodedString = function (value) {\n    return cordova(this, \"bytesToEncodedString\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.stringToBytes = function (value) {\n    return cordova(this, \"stringToBytes\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  BluetoothLEOriginal.prototype.bytesToString = function (value) {\n    return cordova(this, \"bytesToString\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"SCAN_MODE_OPPORTUNISTIC\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"SCAN_MODE_OPPORTUNISTIC\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"SCAN_MODE_OPPORTUNISTIC\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"SCAN_MODE_LOW_POWER\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"SCAN_MODE_LOW_POWER\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"SCAN_MODE_LOW_POWER\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"SCAN_MODE_BALANCED\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"SCAN_MODE_BALANCED\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"SCAN_MODE_BALANCED\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"SCAN_MODE_LOW_LATENCY\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"SCAN_MODE_LOW_LATENCY\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"SCAN_MODE_LOW_LATENCY\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"MATCH_MODE_AGGRESSIVE\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"MATCH_MODE_AGGRESSIVE\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"MATCH_MODE_AGGRESSIVE\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"MATCH_MODE_STICKY\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"MATCH_MODE_STICKY\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"MATCH_MODE_STICKY\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"MATCH_NUM_ONE_ADVERTISEMENT\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"MATCH_NUM_ONE_ADVERTISEMENT\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"MATCH_NUM_ONE_ADVERTISEMENT\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"MATCH_NUM_FEW_ADVERTISEMENT\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"MATCH_NUM_FEW_ADVERTISEMENT\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"MATCH_NUM_FEW_ADVERTISEMENT\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"MATCH_NUM_MAX_ADVERTISEMENT\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"MATCH_NUM_MAX_ADVERTISEMENT\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"MATCH_NUM_MAX_ADVERTISEMENT\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"CALLBACK_TYPE_ALL_MATCHES\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"CALLBACK_TYPE_ALL_MATCHES\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"CALLBACK_TYPE_ALL_MATCHES\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"CALLBACK_TYPE_FIRST_MATCH\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"CALLBACK_TYPE_FIRST_MATCH\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"CALLBACK_TYPE_FIRST_MATCH\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BluetoothLEOriginal.prototype, \"CALLBACK_TYPE_MATCH_LOST\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"CALLBACK_TYPE_MATCH_LOST\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"CALLBACK_TYPE_MATCH_LOST\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BluetoothLEOriginal.pluginName = \"BluetoothLE\";\n  BluetoothLEOriginal.plugin = \"cordova-plugin-bluetoothle\";\n  BluetoothLEOriginal.pluginRef = \"bluetoothle\";\n  BluetoothLEOriginal.repo = \"https://github.com/randdusing/cordova-plugin-bluetoothle\";\n  BluetoothLEOriginal.install = \"ionic cordova plugin add cordova-plugin-bluetoothle\";\n  BluetoothLEOriginal.installVariables = [];\n  BluetoothLEOriginal.platforms = [\"Android\", \"iOS\"];\n  return BluetoothLEOriginal;\n}(IonicNativePlugin);\n\nvar BluetoothLE = new BluetoothLEOriginal();\nexport { BluetoothLE };","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/bluetooth-le/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaProperty, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n\n/* Available status of device */\nexport type Status =\n  | 'scanStarted'\n  | 'scanStopped'\n  | 'scanResult'\n  | 'connected'\n  | 'disconnected'\n  | 'bonding'\n  | 'bonded'\n  | 'unbonded'\n  | 'closed'\n  | 'services'\n  | 'discovered'\n  | 'characteristics'\n  | 'descriptors'\n  | 'read'\n  | 'subscribed'\n  | 'unsubscribed'\n  | 'subscribedResult'\n  | 'written'\n  | 'readDescriptor'\n  | 'writeDescriptor'\n  | 'rssi'\n  | 'mtu'\n  | 'connectionPriorityRequested'\n  | 'enabled'\n  | 'disabled'\n  | 'readRequested'\n  | 'writeRequested'\n  | 'mtuChanged'\n  | 'notifyReady'\n  | 'notifySent'\n  | 'serviceAdded'\n  | 'serviceRemoved'\n  | 'allServicesRemoved'\n  | 'advertisingStarted'\n  | 'advertisingStopped'\n  | 'responded'\n  | 'notified';\n\n/** Available connection priorities */\nexport type ConnectionPriority = 'low' | 'balanced' | 'high';\n\nexport interface Params {\n  /** The address/identifier provided by the scan's return object */\n  address: string;\n  /** The service's ID */\n  service: string;\n}\n\nexport interface InitPeripheralParams {\n  /** Should user be prompted to enable Bluetooth */\n  request?: boolean;\n  /* A unique string to identify your app. Bluetooth Central background mode is required to use this, but background mode doesn't seem to require specifying the restoreKey */\n  restoreKey?: string;\n}\n\nexport interface InitParams extends InitPeripheralParams {\n  /** Should change in Bluetooth status notifications be sent */\n  statusReceiver?: boolean;\n}\n\nexport interface ScanParams {\n  /* An array of service IDs to filter the scan or empty array / null. This parameter is not supported on Windows platform yet */\n  services?: string[];\n  /* True/false to allow duplicate advertisement packets, defaults to false (iOS)*/\n  allowDuplicates?: boolean;\n  /** Defaults to Low Power. Available from API21 / API 23 (Android) */\n  scanMode?: BluetoothScanMode;\n  /** Defaults to Aggressive. Available from API23 (Android) */\n  matchMode?: BluetoothMatchMode;\n  /** Defaults to One Advertisement. Available from API23 (Android) */\n  matchNum?: BluetoothMatchNum;\n  /** Defaults to All Matches. Available from API21 / API 23. (Android) */\n  callbackType?: BluetoothCallbackType;\n  /** True/false to show only connectable devices, rather than all devices ever seen, defaults to false (Windows) */\n  isConnectable?: boolean;\n}\n\nexport interface NotifyParams {\n  /** Service's UUID */\n  service: string;\n  /** Characteristic's UUID */\n  characteristic: string;\n  /** Base64 encoded string, number or string */\n  value: string;\n}\n\nexport interface RespondParams {\n  /** This integer value will be incremented every read/writeRequested */\n  requestId: number;\n  /** base64 string */\n  value: string;\n  /** not documented */\n  offset?: number;\n}\n\nexport interface CharacteristicParams extends Params {\n  /** An array of characteristic IDs to discover or empty array / null */\n  characteristics?: string[];\n}\n\nexport interface DescriptorParams extends Params {\n  /** The characteristic's ID */\n  characteristic: string;\n}\n\nexport interface OperationDescriptorParams extends DescriptorParams {\n  /** The descriptor's ID */\n  descriptor: string;\n}\n\nexport interface WriteCharacteristicParams extends DescriptorParams {\n  /* Base64 encoded string */\n  value: string;\n  /* Set to \"noResponse\" to enable write without response, all other values will write normally. */\n  type?: string;\n}\n\nexport interface WriteDescriptorParams extends DescriptorParams {\n  /** The descriptor's ID */\n  descriptor: string;\n  /** Base64 encoded string, number or string */\n  value: string;\n}\n\nexport type AdvertisingParams = AdvertisingParamsAndroid | AdvertisingParamsIOS;\nexport type AdvertiseMode = 'balanced' | 'lowLatency' | 'lowPower';\nexport type TxPowerLevel = 'high' | 'low' | 'ultralow' | 'medium';\n\nexport interface AdvertisingParamsAndroid {\n  /** Service UUID on Android */\n  service: string;\n  /** not documented */\n  mode?: AdvertiseMode;\n  /** not documented */\n  connectable?: boolean;\n  /** not documented */\n  timeout?: number;\n  /** not documented */\n  txPowerLevel?: TxPowerLevel;\n  /** not documented */\n  manufacturerId?: number;\n  /** not documented */\n  manufacturerSpecificData?: any;\n  /** not documented */\n  includeDeviceName: boolean;\n  /** not documented */\n  includeTxPowerLevel: boolean;\n}\n\nexport interface AdvertisingParamsIOS {\n  /** Array of service UUIDs on iOS */\n  services: string[];\n  /** device's name */\n  name?: string;\n}\n\nexport interface CommonInfo {\n  /** The device's display name */\n  name: string;\n  /** The device's address / identifier for connecting to the object */\n  address: string;\n}\n\nexport interface DeviceInfo extends CommonInfo {\n  /** Device's status */\n  status: Status;\n}\n\nexport interface RSSI extends DeviceInfo {\n  /** signal strength */\n  rssi: number;\n}\n\nexport interface MTU extends DeviceInfo {\n  /* mtu value */\n  mtu: number;\n}\n\nexport interface BondedStatus extends CommonInfo {\n  /* Bonded status*/\n  isBonded: boolean;\n}\n\nexport interface PrevConnectionStatus extends CommonInfo {\n  /** Determine whether the device was connected */\n  wasConnected: boolean;\n}\n\nexport interface CurrConnectionStatus extends CommonInfo {\n  /** Determine whether the device is connected */\n  isConnected: boolean;\n}\n\nexport interface DiscoverStatus extends CommonInfo {\n  /** Determine whether the device's characteristics and descriptors have been discovered */\n  isDiscovered: boolean;\n}\n\nexport interface ScanStatus extends DeviceInfo {\n  /** signal strength */\n  rssi: number;\n  /**\n   * advertisement data in encoded string of bytes, use bluetoothle.encodedStringToBytes() (Android)\n   * advertisement hash with the keys (iOS)\n   * empty (Windows)\n   */\n  advertisement:\n    | {\n        /** An array of service UUIDs */\n        serviceUuids: string[];\n        /** A string representing the name of the manufacturer of the device */\n        manufacturerData: string;\n        /** A number containing the transmit power of a peripheral */\n        txPowerLevel: number;\n        /** An array of one or more CBUUID objects, representing CBService UUIDs that were found in the “overflow” area of the advertisement data */\n        overflowServiceUuids: string[];\n        /** A boolean value that indicates whether the advertising event type is connectable */\n        isConnectable: boolean;\n        /** An array of one or more CBUUID objects, representing CBService UUIDs */\n        solicitedServiceUuids: string[];\n        /* A dictionary containing service-specific advertisement data */\n        serviceData: any;\n        /* A string containing the local name of a peripheral */\n        localName: string;\n      }\n    | string;\n}\n\nexport interface Service {\n  /** Service's uuid */\n  uuid: string;\n  /** Array of characteristics */\n  characteristics: Characteristic[];\n}\n\nexport interface Characteristic {\n  /* Array of descriptors */\n  descriptors?: Descriptor[];\n  /**  Characteristic's uuid */\n  uuid: string;\n  /**\n   *  Characteristic's properties\n   *  If the property is defined as a key, the characteristic has that property\n   */\n  properties?: {\n    write?: boolean;\n    broadcast?: boolean;\n    extendedProps?: boolean;\n    writeWithoutResponse?: boolean;\n    writeNoResponse?: boolean;\n    signedWrite?: boolean;\n    read?: boolean;\n    notify?: boolean;\n    indicate?: boolean;\n    authenticatedSignedWrites?: boolean;\n    notifyEncryptionRequired?: boolean;\n    indicateEncryptionRequired?: boolean;\n  };\n  /**\n   *  If the permission is defined as a key, the character has that permission\n   */\n  permissions?: {\n    read?: boolean;\n    readEncrypted?: boolean;\n    readEncryptedMITM?: boolean;\n    write?: boolean;\n    writeSigned?: boolean;\n    writeSignedMITM?: boolean;\n    writeEncryptedMITM?: boolean;\n    readEncryptionRequired?: boolean;\n    writeEncryptionRequired?: boolean;\n  };\n}\n\nexport interface Descriptor {\n  uuid: string;\n}\n\nexport interface Device extends DeviceInfo {\n  /** Device's services */\n  services: Service[];\n}\n\nexport interface Services extends DeviceInfo {\n  /** Array of service UUIDS */\n  services: string[];\n}\n\nexport interface Descriptors extends DeviceInfo {\n  /** Characteristic's UUID */\n  characteristic: string;\n  /** Service's UUID */\n  service: string;\n  /* Array of descriptor UUIDs */\n  descriptors: string[];\n}\n\nexport interface OperationResult extends DeviceInfo {\n  /** Characteristic UUID */\n  characteristic: string;\n  /** Service's UUID */\n  service: string;\n  /** Base64 encoded string of bytes */\n  value: string;\n}\n\nexport interface UnsubscribeResult extends DeviceInfo {\n  /** Characteristic UUID */\n  characteristic: string;\n  /** Service's UUID */\n  service: string;\n}\n\nexport interface DescriptorResult extends OperationResult {\n  descriptor: string;\n}\n\nexport interface Characteristics extends DeviceInfo {\n  /** Service's id */\n  service: string;\n  /* Array of characteristic objects*/\n  characteristics: Characteristic[];\n}\n\nexport interface InitializeResult {\n  /** Device's status */\n  status: Status;\n  /** The address/identifier provided by the scan's return object */\n  address: string;\n  /** Service's UUID */\n  service: string;\n  /** Characteristic UUID */\n  characteristic: string;\n  /** This integer value will be incremented every read/writeRequested */\n  requestId: number;\n  /** Offset value */\n  offset: number;\n  /** mtu value */\n  mtu: number;\n  /** Base64 encoded string of bytes */\n  value: string;\n}\n\nexport enum BluetoothScanMode {\n  SCAN_MODE_OPPORTUNISTIC = -1,\n  SCAN_MODE_LOW_POWER = 0,\n  SCAN_MODE_BALANCED = 1,\n  SCAN_MODE_LOW_LATENCY = 2,\n}\n\nexport enum BluetoothMatchMode {\n  MATCH_MODE_AGRESSIVE = 1,\n  MATCH_MODE_STICKY = 2,\n}\n\nexport enum BluetoothMatchNum {\n  MATCH_NUM_ONE_ADVERTISEMENT = 1,\n  MATCH_NUM_FEW_ADVERTISEMENT = 2,\n  MATCH_NUM_MAX_ADVERTISEMENT = 3,\n}\n\nexport enum BluetoothCallbackType {\n  CALLBACK_TYPE_ALL_MATCHES = 1,\n  CALLBACK_TYPE_FIRST_MATCH = 2,\n  CALLBACK_TYPE_MATCH_LOST = 4,\n}\n\nexport interface Error {\n  code: number;\n  message: string;\n}\n\nexport interface AdapterInfo {\n  name: string;\n  address: string;\n  isInitialized: boolean;\n  isEnabled: boolean;\n  isScanning: boolean;\n  isDiscoverable: boolean;\n}\n\n/**\n * @name BluetoothLE\n * @description\n * This plugin has the most complete implementation for interacting with Bluetooth LE devices on Android, iOS and partially Windows.\n * It's a wrap around [randdusing/cordova-plugin-bluetoothle](https://github.com/randdusing/cordova-plugin-bluetoothle/blob/master/readme.md) cordova plugin for Ionic.\n * It supports peripheral **and** central modes and covers most of the API methods available on Android and iOS.\n *\n * @usage\n * ```typescript\n * import { BluetoothLE } from '@ionic-native/bluetooth-le/ngx';\n *\n *\n * constructor(public bluetoothle: BluetoothLE, public plt: Platform) {\n *\n *  this.plt.ready().then((readySource) => {\n *\n *    console.log('Platform ready from', readySource);\n *\n *    this.bluetoothle.initialize().then(ble => {\n *      console.log('ble', ble.status) // logs 'enabled'\n *    });\n *\n *   });\n * }\n *\n * ```\n *\n */\n@Plugin({\n  pluginName: 'BluetoothLE',\n  plugin: 'cordova-plugin-bluetoothle', // npm package name, example: cordova-plugin-camera\n  pluginRef: 'bluetoothle', // the variable reference to call the plugin, example: navigator.geolocation\n  repo: 'https://github.com/randdusing/cordova-plugin-bluetoothle', // the github repository URL for the plugin\n  install: 'ionic cordova plugin add cordova-plugin-bluetoothle', // OPTIONAL install command, in case the plugin requires variables\n  installVariables: [], // OPTIONAL the plugin requires variables\n  platforms: ['Android', 'iOS'], // Array of platforms supported, example: ['Android', 'iOS']\n})\n@Injectable()\nexport class BluetoothLE extends IonicNativePlugin {\n  /**\n   * @name initialize\n   * Initialize Bluetooth on the device\n   * @param {InitParams} [params]\n   * @returns {(Observable<{ status: 'enabled' | 'disabled'}>)} The callback that is passed initialize status (enabled/disabled)\n   */\n  @Cordova({ successIndex: 0, errorIndex: 2, observable: true })\n  initialize(params?: InitParams): Observable<{ status: 'enabled' | 'disabled' }> {\n    return;\n  }\n\n  /**\n   * @name enable (Android)\n   * Enable Bluetooth on the device. Android support only\n   * @returns void\n   */\n  @Cordova({ callbackOrder: 'reverse', sync: true })\n  enable() {\n    return;\n  }\n\n  /**\n   * @name disable (Android)\n   * Disable Bluetooth on the device. Android support only\n   * @returns void\n   */\n  @Cordova({ callbackOrder: 'reverse', sync: true })\n  disable() {\n    return;\n  }\n\n  /**\n   * @name getAdapterInfo (Android)\n   * Retrieve useful information such as the address, name, and various states (initialized, enabled, scanning, discoverable).\n   * This can be very useful when the general state of the adapter has been lost, and we would otherwise need to go through a series of callbacks to get the correct state (first initialized, then enabled, then isScanning, and so forth).\n   * The result of this method allows us to take business logic decisions while avoiding a large part of the callback hell.\n   * Currently the discoverable state does not have any relevance because there is no \"setDiscoverable\" functionality in place. That may change in the future.\n   * @returns {Promise<AdapterInfo>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  getAdapterInfo(): Promise<AdapterInfo> {\n    return;\n  }\n\n  /**\n   * @name startScan\n   * Scan for Bluetooth LE devices.\n   * Since scanning is expensive, stop as soon as possible. The Cordova app should use a timer to limit the scan interval.\n   * Android API >= 23 requires ACCESS_COARSE_LOCATION permissions to find unpaired devices.\n   * Permissions can be requested by using the hasPermission and requestPermission functions.\n   * Android API >= 23 also requires location services to be enabled. Use isLocationEnabled to determine whether location services are enabled.\n   * If not enabled, use requestLocation to prompt the location services settings page.\n   * @param {ScanParams} params Scan params\n   * @returns {(Observable< ScanStatus >)}\n   */\n  @Cordova({ callbackOrder: 'reverse', observable: true })\n  startScan(params: ScanParams): Observable<ScanStatus> {\n    return;\n  }\n\n  /**\n   * @name stopScan\n   * Stop scan for Bluetooth LE devices. Since scanning is expensive, stop as soon as possible\n   * The app should use a timer to limit the scanning time.\n   * @returns {Promise<{status: 'scanStopped'}>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  stopScan(): Promise<{ status: 'scanStopped' }> {\n    return;\n  }\n\n  /**\n   * @name retrieveConnected\n   * Retrieved paired Bluetooth LE devices. In iOS, devices that are \"paired\" to will not return during a normal scan.\n   * Callback is \"instant\" compared to a scan.\n   * @param {{ services: string[] }} An array of service IDs to filter the retrieval by. If no service IDs are specified, no devices will be returned.\n   * @returns {Promise<{ devices: DeviceInfo[] }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  retrieveConnected(params?: { services?: string[] }): Promise<{ devices: DeviceInfo[] }> {\n    return;\n  }\n\n  /**\n   * @name bond (Android)\n   * Bond with a device.\n   * The device doesn't need to be connected to initiate bonding. Android support only.\n   * @param {{ address: string }} params The address/identifier provided by the scan's return object\n   * @returns {(Observable<{ status: DeviceInfo }>)}\n   * success:\n   *    The first success callback should always return with status == bonding.\n   *    If the bond is created, the callback will return again with status == bonded.\n   *    If the bonding popup is canceled or the wrong code is entered, the callback will return again with status == unbonded.\n   * error:\n   *    The callback that will be triggered when the bond operation fails\n   */\n  @Cordova({ callbackOrder: 'reverse', observable: true })\n  bond(params: { address: string }): Observable<{ status: DeviceInfo }> {\n    return;\n  }\n\n  /**\n   * @name unbond (Android)\n   * Unbond with a device. The device doesn't need to be connected to initiate bonding. Android support only.\n   * @param {{address: string}} params The address/identifier\n   * @returns {Promise<{ status: DeviceInfo }>}\n   *    success: The success callback should always return with status == unbonded, that is passed with device object\n   *    error: The callback that will be triggered when the unbond operation fails\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  unbond(params: { address: string }): Promise<{ status: DeviceInfo }> {\n    return;\n  }\n\n  /**\n   * @name connect\n   * Connect to a Bluetooth LE device\n   * @param connectSuccess The success callback that is passed with device object\n   * @param connectError   The callback that will be triggered when the connect operation fails\n   * @param params         The address/identifier\n   *\n   * @param {{address: string, autoConnect: boolean}} params\n   * @returns {(Observable<{ status: DeviceInfo }>)}\n   *    success: device object with status\n   *    error: The callback that will be triggered when the unbond operation fails\n   */\n  @Cordova({ callbackOrder: 'reverse', observable: true })\n  connect(params: { address: string; autoConnect?: boolean }): Observable<DeviceInfo> {\n    return;\n  }\n\n  /**\n   * @name reconnect\n   * Reconnect to a previously connected Bluetooth device\n   * @param {{address: string}} params The address/identifier\n   * @returns {(Observable<DeviceInfo>)}\n   */\n  @Cordova({ callbackOrder: 'reverse', observable: true })\n  reconnect(params: { address: string }): Observable<DeviceInfo> {\n    return;\n  }\n\n  /**\n   * @name disconnect\n   * Disconnect from a Bluetooth LE device.\n   *              Note: It's simpler to just call close(). Starting with iOS 10, disconnecting before closing seems required!\n   * @param {{address: string}} params The address/identifier\n   * @returns {Promise<DeviceInfo>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  disconnect(params: { address: string }): Promise<DeviceInfo> {\n    return;\n  }\n\n  /**\n   * @name close\n   * Close/dispose a Bluetooth LE device.\n   * Prior to 2.7.0, you needed to disconnect to the device before closing, but this is no longer the case.\n   * Starting with iOS 10, disconnecting before closing seems required!\n   * @param {{ address: string }} params The address/identifier\n   * @returns {Promise<DeviceInfo>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  close(params: { address: string }): Promise<DeviceInfo> {\n    return;\n  }\n\n  /**\n   * @name discover\n   * Discover all the devices services, characteristics and descriptors.\n   * Doesn't need to be called again after disconnecting and then reconnecting.\n   * If using iOS, you shouldn't use discover and services/characteristics/descriptors on the same device.\n   * There seems to be an issue with calling discover on iOS8 devices, so use with caution.\n   * On some Android versions, the discovered services may be cached for a device.\n   * Subsequent discover events will make use of this cache.\n   * If your device's services change, set the clearCache parameter to force Android to re-discover services.\n   * @param {{ address: string, clearCache: boolean }} params The address/identifier\n   * @returns {Promise<Device>}\n   *    success: device object (contains array of service objects)\n   *    error: The callback that will be triggered when the unbond operation fails\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  discover(params: { address: string; clearCache?: boolean }): Promise<Device> {\n    return;\n  }\n\n  /**\n   * @name services (iOS)\n   * Discover the device's services.\n   * Not providing an array of services will return all services and take longer to discover. iOS support only.\n   * @param {{address: string, services: string[]}} params\n   * @returns {Promise<Services>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  services(params: { address: string; services?: string[] }): Promise<Services> {\n    return;\n  }\n\n  /**\n   * @name characteristics (iOS)\n   * Discover the service's characteristics.\n   * Not providing an array of characteristics will return all characteristics and take longer to discover. iOS support only.\n   * @param {CharacteristicParams} params Characteristic params\n   * @returns {Promise<{ characteristics: Characteristics }>} The service id and an Array of characteristics\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  characteristics(params: CharacteristicParams): Promise<{ characteristics: Characteristics }> {\n    return;\n  }\n\n  /**\n   * @name descriptors (iOS)\n   * Discover the characteristic's descriptors. iOS support only.\n   * @param {DescriptorParams} params\n   * @returns {Promise<{ descriptors: Descriptors }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  descriptors(params: DescriptorParams): Promise<{ descriptors: Descriptors }> {\n    return;\n  }\n\n  /**\n   * @name read\n   * Read a particular service's characteristic once\n   * @param {DescriptorParams} params\n   * @returns {Promise<OperationResult>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  read(params: DescriptorParams): Promise<OperationResult> {\n    return;\n  }\n\n  /**\n   * @name subscribe\n   * Subscribe to a particular service's characteristic.\n   * Once a subscription is no longer needed, execute unsubscribe in a similar fashion.\n   * The Client Configuration descriptor will automatically be written to enable notification/indication based on the characteristic's properties.\n   * @param {DescriptorParams} params\n   * @returns {Observable<OperationResult>}\n   */\n  @Cordova({ callbackOrder: 'reverse', observable: true })\n  subscribe(params: DescriptorParams): Observable<OperationResult> {\n    return;\n  }\n\n  /**\n   * @name unsubscribe\n   * Unsubscribe to a particular service's characteristic.\n   * @param {DescriptorParams} params\n   * @returns {Promise<UnsubscribeResult>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  unsubscribe(params: DescriptorParams): Promise<UnsubscribeResult> {\n    return;\n  }\n\n  /**\n   * @name write (limitation on iOS, read below)\n   * Write a particular service's characteristic\n   * Note: no callback will occur on write without response on iOS.\n   * @param {WriteCharacteristicParams} params\n   * @returns {Promise<OperationResult>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  write(params: WriteCharacteristicParams): Promise<OperationResult> {\n    return;\n  }\n\n  /**\n   * @name write (limitation on iOS, read below)\n   * Write Quick / Queue, use this method to quickly execute write without response commands when writing more than 20 bytes at a time.\n   * Note: no callback will occur on write without response on iOS.\n   * @param {WriteCharacteristicParams} params\n   * @returns {Promise<OperationResult>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  writeQ(params: WriteCharacteristicParams): Promise<OperationResult> {\n    return;\n  }\n\n  /**\n   * @name readDescriptor\n   * Read a particular characterist's descriptor\n   * @param {OperationDescriptorParams} params\n   * @returns {Promise<DescriptorResult>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  readDescriptor(params: OperationDescriptorParams): Promise<DescriptorResult> {\n    return;\n  }\n\n  /**\n   * @name writeDescriptor\n   * Write a particular characteristic's descriptor. Unable to write characteristic configuration directly to keep in line with iOS implementation.\n   * Instead use subscribe/unsubscribe, which will automatically enable/disable notification.\n   * @param {WriteDescriptorParams} params\n   * @returns {Promise<DescriptorResult>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  writeDescriptor(params: WriteDescriptorParams): Promise<DescriptorResult> {\n    return;\n  }\n\n  /**\n   * @name rssi\n   * Read RSSI of a connected device. RSSI is also returned with scanning.\n   * @param {{ address: string }} params\n   * @returns {Promise< RSSI >}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  rssi(params: { address: string }): Promise<RSSI> {\n    return;\n  }\n\n  /**\n   * @name mtu (Android, Android 5+)\n   * Set MTU of a connected device. Android only.\n   * @param {{ address: string, mtu: number }} params\n   * @returns {Promise< MTU >}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  mtu(params: { address: string; mtu?: number }): Promise<MTU> {\n    return;\n  }\n\n  /**\n   * @name requestConnectionPriority (Android, Android 5+)\n   * Request a change in the connection priority to improve throughput when transfer large amounts of data via BLE.\n   * Android support only. iOS will return error.\n   * @param {{ address: string, connectionPriority: ConnectionPriority }} params\n   * @returns {Promise<DeviceInfo>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  requestConnectionPriority(params: { address: string; connectionPriority: ConnectionPriority }): Promise<DeviceInfo> {\n    return;\n  }\n\n  /**\n   * @name isInitialized\n   * Determine whether the adapter is initialized. No error callback. Returns true or false\n   * @returns {Promise<{ isInitialized: boolean }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  isInitialized(): Promise<{ isInitialized: boolean }> {\n    return;\n  }\n\n  /**\n   * @name isEnabled\n   * Determine whether the adapter is enabled. No error callback\n   * @returns {Promise<{ isEnabled: boolean }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  isEnabled(): Promise<{ isEnabled: boolean }> {\n    return;\n  }\n\n  /**\n   * @name isScanning\n   * Determine whether the adapter is scanning. No error callback. Returns true or false\n   * @returns {Promise<{ isScanning: boolean }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  isScanning(): Promise<{ isScanning: boolean }> {\n    return;\n  }\n\n  /**\n   * @name isBonded (Android)\n   * Determine whether the device is bonded or not, or error if not initialized. Android support only.\n   * @param {{ address: string }} params\n   * @returns {Promise<BondedStatus>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  isBonded(params: { address: string }): Promise<BondedStatus> {\n    return;\n  }\n\n  /**\n   * @name wasConnected\n   * Determine whether the device was connected, or error if not initialized.\n   * @param {{ address: string }} params\n   * @returns {Promise<PrevConnectionStatus>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  wasConnected(params: { address: string }): Promise<PrevConnectionStatus> {\n    return;\n  }\n\n  /**\n   * @name isConnected\n   * Determine whether the device is connected, or error if not initialized or never connected to device\n   * @param {{ address: string }} params\n   * @returns {Promise<CurrConnectionStatus>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  isConnected(params: { address: string }): Promise<CurrConnectionStatus> {\n    return;\n  }\n\n  /**\n   * @name isDiscovered\n   * Determine whether the device's characteristics and descriptors have been discovered, or error if not initialized or not connected to device.\n   * @param {{ address: string }} params\n   * @returns {Promise<DiscoverStatus>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  isDiscovered(params: { address: string }): Promise<DiscoverStatus> {\n    return;\n  }\n\n  /**\n   * @name hasPermission (useful only for Android 6+ / API 23)\n   * Determine whether coarse location privileges are granted since scanning for unpaired devices requires it in Android API 23\n   * @returns {Promise<{ hasPermission: boolean }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  hasPermission(): Promise<{ hasPermission: boolean }> {\n    return;\n  }\n\n  /**\n   * @name requestPermission (useful only for Android 6+ / API 23)\n   * Request coarse location privileges since scanning for unpaired devices requires it in Android API 23.\n   * Will return an error if called on iOS or Android versions prior to 6.0.\n   * @returns {Promise<{ requestPermission: boolean }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  requestPermission(): Promise<{ requestPermission: boolean }> {\n    return;\n  }\n\n  /**\n   * @name isLocationEnabled (useful only for Android 6+ / API 23)\n   * Determine if location services are enabled or not. Location Services are required to find devices in Android API 23\n   * @returns {Promise<{ isLocationEnabled: boolean }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  isLocationEnabled(): Promise<{ isLocationEnabled: boolean }> {\n    return;\n  }\n\n  /**\n   * @name requestLocation (useful only for Android 6+ / API 23)\n   * Prompt location services settings pages. requestLocation property returns whether location services are enabled or disabled.\n   * Location Services are required to find devices in Android API 23.\n   * @returns {Promise<{ requestLocation: boolean }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  requestLocation(): Promise<{ requestLocation: boolean }> {\n    return;\n  }\n\n  /**\n   * @name initializePeripheral\n   * Initialize Bluetooth on the device. Must be called before anything else.\n   * Callback will continuously be used whenever Bluetooth is enabled or disabled.\n   * @param {InitPeripheralParams} [params]\n   * @returns {Observable<InitializeResult>}\n   */\n  @Cordova({ callbackOrder: 'reverse', observable: true })\n  initializePeripheral(params?: InitPeripheralParams): Observable<InitializeResult> {\n    return;\n  }\n\n  /**\n   * @name addService\n   * Add a service with characteristics and descriptors. If more than one service is added, add them sequentially\n   * @param {{ service: string, characteristics: Characteristic[] }} params\n   * @returns {Promise<{ service: string, status: Status }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  addService(params: {\n    service: string;\n    characteristics: Characteristic[];\n  }): Promise<{ service: string; status: Status }> {\n    return;\n  }\n\n  /**\n   * @name removeService\n   * Remove a service\n   * @param {{ service: string }} params\n   * @returns {Promise<{ service: string, status: Status }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  removeService(params: { service: string }): Promise<{ service: string; status: Status }> {\n    return;\n  }\n\n  /**\n   * @name removeAllServices\n   * Remove all services\n   * @returns {Promise<{ status: Status }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  removeAllServices(): Promise<{ status: Status }> {\n    return;\n  }\n\n  /**\n   * @name startAdvertising (different behavior on Android/iOS, read below)\n   * Start advertising as a BLE device.\n   * Note: This needs to be improved so services can be used for both Android and iOS.\n   * On iOS, the advertising devices likes to rename itself back to the name of the device, i.e. Rand' iPhone\n   * @param {AdvertisingParams} params\n   * @returns {Promise<{ status: Status }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  startAdvertising(params: AdvertisingParams): Promise<{ status: Status }> {\n    return;\n  }\n\n  /**\n   * @name stopAdvertising\n   * Stop advertising\n   * @returns {Promise<{ status: Status }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  stopAdvertising(): Promise<{ status: Status }> {\n    return;\n  }\n\n  /**\n   * @name isAdvertising\n   * Determine if app is advertising or not.\n   * @returns {Promise<{ status: boolean }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  isAdvertising(): Promise<{ status: boolean }> {\n    return;\n  }\n\n  /**\n   * @name respond\n   * Respond to a read or write request\n   * @param {RespondParams} params\n   * @returns {Promise<{ status: Status }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  respond(params: RespondParams): Promise<{ status: Status }> {\n    return;\n  }\n\n  /**\n   * @name notify\n   * Update a value for a subscription. Currently all subscribed devices will receive update.\n   * Device specific updates will be added in the future.\n   * If sent equals false in the return value, you must wait for the peripheralManagerIsReadyToUpdateSubscribers event before sending more updates.\n   * @param {NotifyParams} params\n   * @returns {Promise<{ status: Status, sent: boolean }>}\n   */\n  @Cordova({ callbackOrder: 'reverse' })\n  notify(params: NotifyParams): Promise<{ status: Status; sent: boolean }> {\n    return;\n  }\n\n  /**\n   * @name encodedStringToBytes\n   * Helper function to convert a base64 encoded string from a characteristic or descriptor value into a uint8Array object\n   * @param {string} str\n   * @returns {Uint8Array}\n   */\n  @Cordova({ sync: true })\n  encodedStringToBytes(value: string): Uint8Array {\n    return;\n  }\n\n  /**\n   * @name bytesToEncodedString\n   * Helper function to convert a unit8Array to a base64 encoded string for a characteric or descriptor write\n   * @param {Uint8Array} bytes\n   * @returns {string}\n   */\n  @Cordova({ sync: true })\n  bytesToEncodedString(value: Uint8Array): string {\n    return;\n  }\n\n  /**\n   * @name stringToBytes\n   * Helper function to convert a string to bytes\n   * @param {string} value\n   * @returns {Uint8Array}\n   */\n  @Cordova({ sync: true })\n  stringToBytes(value: string): Uint8Array {\n    return;\n  }\n\n  /**\n   * @name bytesToString\n   * Helper function to convert bytes to a string.\n   * @param {Uint8Array} value\n   * @returns {string}\n   */\n  @Cordova({ sync: true })\n  bytesToString(value: Uint8Array): string {\n    return;\n  }\n\n  @CordovaProperty()\n  SCAN_MODE_OPPORTUNISTIC: number;\n  @CordovaProperty()\n  SCAN_MODE_LOW_POWER: number;\n  @CordovaProperty()\n  SCAN_MODE_BALANCED: number;\n  @CordovaProperty()\n  SCAN_MODE_LOW_LATENCY: number;\n  @CordovaProperty()\n  MATCH_MODE_AGGRESSIVE: number;\n  @CordovaProperty()\n  MATCH_MODE_STICKY: number;\n  @CordovaProperty()\n  MATCH_NUM_ONE_ADVERTISEMENT: number;\n  @CordovaProperty()\n  MATCH_NUM_FEW_ADVERTISEMENT: number;\n  @CordovaProperty()\n  MATCH_NUM_MAX_ADVERTISEMENT: number;\n  @CordovaProperty()\n  CALLBACK_TYPE_ALL_MATCHES: number;\n  @CordovaProperty()\n  CALLBACK_TYPE_FIRST_MATCH: number;\n  @CordovaProperty()\n  CALLBACK_TYPE_MATCH_LOST: number;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}